services:
  ollama:
    container_name: ollama
    build:
      context: ./ollama
      dockerfile: Dockerfile
    ports:
      - "11434:11434"
    volumes:
      - ./ollama/ollama-data:/root/.ollama
    healthcheck:
      test: ["CMD", "test", "-f", "/tmp/ollama-ready"]
      interval: 10s
      timeout: 5s
      retries: 50 # it can take a long time to download the model
      start_period: 120s

  dotnet:
    container_name: dotnet
    build:
      context: ./dotnet
      dockerfile: Dockerfile
      target: development
    ports:
      - "5032:5032"
    volumes:
      - ./dotnet:/app
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5032/health"]
      interval: 10s
      timeout: 5s
      retries: 50
      start_period: 120s
    depends_on:
      ollama:
        condition: service_healthy
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy

  nginx:
    container_name: nginx
    build:
      context: ./nginx
      dockerfile: Dockerfile
    ports:
      - "80:80"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/api/dotnet/health"]
      interval: 10s
      timeout: 5s
      start_period: 120s
    depends_on:
      dotnet:
        condition: service_healthy
      go:
        condition: service_healthy

  nextjs:
    container_name: nextjs
    build:
      context: ./nextjs
      dockerfile: Dockerfile
      target: development
    ports:
      - "3000:3000"
    volumes:
      - ./nextjs:/app
      - /app/node_modules # prevent node_modules from being mounted as a volume
    depends_on:
      nginx:
        condition: service_healthy

  postgres:
    image: postgres:17.5-alpine
    container_name: postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: password
      POSTGRES_DB: chatbot-prod
    ports:
      - "5432:5432"
    volumes:
      - ./postgres/data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U admin -d chatbot-prod"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 120s

  rabbitmq:
    image: rabbitmq:4.1.1-management-alpine
    container_name: rabbitmq
    ports:
      - "15672:15672"
      - "5672:5672"
    volumes:
      - ./rabbitmq/data:/var/lib/rabbitmq
    environment:
      - RABBITMQ_DEFAULT_USER=admin
      - RABBITMQ_DEFAULT_PASS=password
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 120s

  go:
    container_name: go
    build:
      context: ./go
      dockerfile: Dockerfile
      target: development
    ports:
      - "8080:8080"
    volumes:
      - ./go:/go/src/app
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/healthcheck"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 120s
    depends_on:
      dotnet:
        condition: service_healthy
